namespace Wetcardboard_Authentication.Authenticator.Azure_AD_OAuth2
{
    public class Auth_DtModelProps_Azure_AD_OAuth2_Auth
    {
        #region Fields & Properties
        #region Properties
        #region Required
        /// <summary>
        /// ** Required **<para/>
        /// The Application (client) ID that the Azure portal – <see href="https://go.microsoft.com/fwlink/?linkid=2083908">App registrations</see>
        /// experience assigned to your app.
        /// </summary>
        public string ClientId { get; set; }

        /// <summary>
        /// ** Required for confidential web apps **<para/>
        /// The application secret that you created in the app registration portal for your app.<para/>
        /// Don't use the application secret in a native app or single page app because a client_secret can't be reliably stored on devices or web pages.<para/>
        /// It's required for web apps and web APIs, which can store the client_secret securely on the server side.<para/>
        /// Like all parameters here, the client secret must be URL-encoded before being sent.<para/>
        /// This step is usually done by the SDK.<para/>
        /// For more information on URI encoding, see the <see href="https://tools.ietf.org/html/rfc3986#page-12">URI Generic Syntax specification</see>.<para/>
        /// The Basic auth pattern of instead providing credentials in the Authorization header, per <see href="https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1">RFC 6749</see> is also supported.
        /// </summary>
        public string ClientSecret { get; set; }

        /// <summary>
        /// ** Required **<para/>
        /// Must be authorization_code for the authorization code flow.
        /// </summary>
        public string GrantType { get; set; }

        /// <summary>
        /// ** Required**<para/>
        /// A value included in the request, generated by the app, that is included in the resulting id_token as a claim.<para/>
        /// The app can then verify this value to mitigate token replay attacks.<para/>
        /// The value is typically a randomized, unique string that can be used to identify the origin of the request.
        /// </summary>
        public string Nonce_Pool { get; set; }

        /// <summary>
        /// ** Required **<para/>
        /// The redirect_uri of your app, where authentication responses can be sent and received by your app.<para/>
        /// It must exactly match one of the redirect URIs you registered in the portal, except it must be URL-encoded.<para/>
        /// For native and mobile apps, use one of the recommended values: <see href="https://login.microsoftonline.com/common/oauth2/nativeclient">MS nativeclient</see> for apps using embedded browsers<para/>
        ///  or <see href="http://localhost">http://localhost</see> for apps that use system browsers.
        /// </summary>
        public string RedirectUri { get; set; }

        /// <summary>
        /// ** Required **<para/>
        /// Must include code for the authorization code flow.<para/>
        /// Can also include id_token or token if using the <see href="https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#request-an-id-token-as-well-or-hybrid-flow">hybrid flow</see>.
        /// </summary>
        public string ResponseType { get; set; }

        /// <summary>
        /// ** Required **<para/>
        /// A space-separated list of <see href="https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent">scopes</see> that you want the user to consent to.<para/>
        /// For the /authorize leg of the request, this parameter can cover multiple resources.<para/>
        /// This value allows your app to get consent for multiple web APIs you want to call.
        /// </summary>
        public string Scope { get; set; }

        /// <summary>
        /// ** Required **<para/>
        /// The {tenant} value in the path of the request can be used to control who can sign into the application.<para/>
        /// Valid values are common, organizations, consumers, and tenant identifiers.<para/>
        /// For guest scenarios where you sign a user from one tenant into another tenant, you must provide the tenant identifier to sign them into the resource tenant.<para/>
        /// For more information, see <see href="https://learn.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols#endpoints">Endpoints</see>.
        /// </summary>
        public string Tenant { get; set; }
        #endregion \ Required


        #region Recommended / Required
        /// <summary>
        /// ** Recommended / Required **<para/>
        /// Used to secure authorization code grants by using Proof Key for Code Exchange (PKCE). 
        /// Required if code_challenge_method is included. For more information, see the <see href="https://tools.ietf.org/html/rfc7636">PKCE RFC</see>.<para/>
        /// This parameter is now recommended for all application types, both public and confidential clients, 
        /// and required by the Microsoft identity platform for <see href="https://learn.microsoft.com/en-us/azure/active-directory/develop/reference-third-party-cookies-spas">single page apps using the authorization code flow</see>.
        /// </summary>
        public string Code_challenge { get; set; }

        /// <summary>
        /// ** Recommended / Required **<para/>
        /// The method used to encode the code_verifier for the code_challenge parameter. This SHOULD be S256, but the spec allows the use of plain if the client can't support SHA256.<para/>
        /// If excluded, code_challenge is assumed to be plaintext if code_challenge is included.The Microsoft identity platform supports both plain and S256.For more information, see the <see href="https://tools.ietf.org/html/rfc7636">PKCE RFC</see>.<para/>
        /// This parameter is required for <see href="https://learn.microsoft.com/en-us/azure/active-directory/develop/reference-third-party-cookies-spas">single page apps using the authorization code flow</see>.
        /// </summary>
        public string Code_challenge_method { get; set; }
        #endregion \ Recommended / Required


        #region Recommended
        /// <summary>
        /// ** Recommended **<para/>
        /// The same code_verifier that was used to obtain the authorization_code.<para/>
        /// Required if PKCE was used in the authorization code grant request. For more information, see the <see href="https://tools.ietf.org/html/rfc7636">PKCE RFC</see>.
        /// </summary>
        public string Code_Verifier { get; set; }

        /// <summary>
        /// ** Recommended **<para/>
        /// Specifies how the identity platform should return the requested token to your app.<para/>
        /// Supported values: '<i>query</i>', '<i>fragment</i>', '<i>form_post</i>'
        /// <list type="bullet">
        /// <item>query: Default when requesting an access token.Provides the code as a query string parameter on your redirect URI. The query parameter is not supported when requesting an ID token by using the implicit flow.</item>
        /// <item>fragment: Default when requesting an ID token by using the implicit flow.Also supported if requesting only a code.</item>
        /// <item>form_post: Executes a POST containing the code to your redirect URI. Supported when requesting a code.</item>
        /// </list>
        /// </summary>
        public string ResponseMode { get; set; }

        /// <summary>
        /// ** Recommended **<para/>
        /// A value included in the request that is also returned in the token response. 
        /// It can be a string of any content that you wish.<para/>
        /// A randomly generated unique value is typically used for <see href="https://tools.ietf.org/html/rfc6749#section-10.12">preventing cross-site request forgery attacks</see>.<para/>
        /// The value can also encode information about the user's state in the app before the authentication request occurred.<para/>
        /// For instance, it could encode the page or view they were on.
        /// </summary>
        public string State { get; set; }
        #endregion \ Recommended


        #region Optional
        /// <summary>
        /// ** Optional **<para/>
        /// If included, the app skips the email-based discovery process that user goes through on the sign-in page, leading to a slightly more streamlined user experience. 
        /// For example, sending them to their federated identity provider. Apps can use this parameter during reauthentication, by extracting the tid from a previous sign-in.
        /// </summary>
        public string DomainHint { get; set; }

        /// <summary>
        /// ** Optional **<para/>
        /// You can use this parameter to pre-fill the username and email address field of the sign-in page for the user. 
        /// Apps can use this parameter during reauthentication, after already extracting the login_hint optional claim from an earlier sign-in.
        /// </summary>
        public string LoginHint { get; set; }

        /// <summary>
        /// ** Optional **<para/>
        /// Valid values: '<i>login</i>', '<i>none</i>', '<i>consent</i>', '<i>select_account</i>'<para/>
        /// <list type="bullet">
        /// <item>prompt=login forces the user to enter their credentials on that request, negating single-sign on.</item>
        /// <item>prompt=none is the opposite.It ensures that the user isn't presented with any interactive prompt. 
        /// If the request can't be completed silently by using single-sign on, the Microsoft identity platform returns an interaction_required error.</item>
        /// <item>prompt=consent triggers the OAuth consent dialog after the user signs in, asking the user to grant permissions to the app.</item>
        /// <item>prompt=select_account interrupts single sign-on providing account selection experience listing all the accounts either in session or any 
        /// remembered account or an option to choose to use a different account altogether.</item>
        /// </list>
        /// <para/>
        /// </summary>
        public string Prompt { get; set; }
        #endregion \ Optional


        #region Url
        public string Url_AuthCode_Part1 { get; set; }
        public string Url_AuthCode_Part2 { get; set; }
        public string Url_AuthCode_RedirectUri { get; set; }

        public string Url_GraphApi { get; set; }

        public string Url_IdToken_Part1 { get; set; }
        public string Url_IdToken_Part2 { get; set; }
        public string Url_IdToken_RedirectUri { get; set; }

        public string Url_SignOut_Part1 { get; set; }
        public string Url_SignOut_Part2 { get; set; }
        public string Url_SignOut_PostLogoutRedirectUri { get; set; }
        #endregion \ Url
        #endregion \ Properties
        #endregion Fields & Properties


        #region Constructor
        public Auth_DtModelProps_Azure_AD_OAuth2_Auth(
            // Required
            string tenant, string clientId, string clientSecret, string grantType, string nonce_pool, string responseType,
            string redirectUri, string scope,
            // Url
            string url_AuthCode_Part1, string url_AuthCode_Part2, string url_AuthCode_RedirectUri,
            string url_GraphApi,
            string url_IdToken_Part1, string url_IdToken_Part2, string url_IdToken_RedirectUri,
            string url_SignOut_Part1, string url_SignOut_Part2, string url_SignOut_PostLogoutRedirectUri,
            // Recommended
            string codeVerifier, string responseMode = "", string state = "",
            // Optional
            string prompt = "", string loginHint = "", string domainHint = "",
            // Recommended / Required
            string codeChallenge = "", string codeCallengeMethod = ""
            )
        {
            Tenant = tenant;
            ClientId = clientId;
            ClientSecret = clientSecret;
            GrantType = grantType;
            Nonce_Pool = nonce_pool;
            ResponseType = responseType;
            RedirectUri = redirectUri;
            Scope = scope;
            Code_Verifier = codeVerifier;
            ResponseMode = responseMode;
            State = state;
            Prompt = prompt;
            LoginHint = loginHint;
            DomainHint = domainHint;
            Code_challenge = codeChallenge;
            Code_challenge_method = codeCallengeMethod;
            Url_AuthCode_Part1 = url_AuthCode_Part1;
            Url_AuthCode_Part2 = url_AuthCode_Part2;
            Url_AuthCode_RedirectUri = url_AuthCode_RedirectUri;
            Url_GraphApi = url_GraphApi;
            Url_IdToken_Part1 = url_IdToken_Part1;
            Url_IdToken_Part2 = url_IdToken_Part2;
            Url_IdToken_RedirectUri = url_IdToken_RedirectUri;
            Url_SignOut_Part1 = url_SignOut_Part1;
            Url_SignOut_Part2 = url_SignOut_Part2;
            Url_SignOut_PostLogoutRedirectUri = url_SignOut_PostLogoutRedirectUri;
        }
        #endregion \ Constructor
    }
}
